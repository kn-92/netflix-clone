{"version":3,"sources":["Nav.js","axios.js","Row.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","useState","show","setShow","useEffect","window","addEventListener","scrollY","removeEventListener","className","src","alt","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","a","get","request","data","results","fetchData","map","movie","onClick","movieTrailer","name","original_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","poster_path","backdrop_path","id","videoId","opts","height","width","playerVars","autoplay","apiKey","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11a82301.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, setShow] = useState();\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else setShow(false);\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport instance from \"./axios\";\r\nimport \"./row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await instance.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || movie?.title || movie?.original_title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${baseUrl}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && (\r\n        <YouTube\r\n          videoId={trailerUrl}\r\n          opts={{\r\n            height: \"390\",\r\n            width: \"100%\",\r\n            playerVars: {\r\n              // https://developers.google.com/youtube/player_parameters\r\n\r\n              autoplay: 1,\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","const apiKey = \"ae30d08526847ee944b20fd2f63fcd81\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${apiKey}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${apiKey}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated/?api_key=${apiKey}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${apiKey}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${apiKey}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${apiKey}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${apiKey}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${apiKey}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport instance from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./banner.css\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await instance.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n        backgroundPosition: \"bottom bottom\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n          <p className=\"banner__description\">\r\n            {truncate(movie?.overview, 150)}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Nav from \"./Nav\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}